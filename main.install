#!/bin/bash
# Script that downloads and installs the libraries required to install and run for AWI-CM3
# Needs c and fortran compilers, as well as MPI distribution already available

#=================================================================#
#=================================================================#
# Configuration

# Which libraries shall be installed?
switch_zlib=true
switch_szip=true
switch_hdf5=true
switch_netcdfc=true
switch_netcdff=true
switch_eccodes=true
switch_grads=true

# Which versions shall be installed?
version_zlib=1.2.11
version_szip=2.1.1
version_hdf5=1.10.5
version_netcdfc=4.7.4
version_netcdff=4.5.3
version_eccodes=2.22.1
version_grads=2.2.1

# Where should the tarballs be downloaded from?
site_zlib=https://zlib.net/
site_szip=https://support.hdfgroup.org/ftp/lib-external/szip/
site_hdf5=https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/ #Note: this is the release version, not the package version
site_netcdfc=ftp://ftp.unidata.ucar.edu/pub/netcdf/
site_netcdff=ftp://ftp.unidata.ucar.edu/pub/netcdf/
site_eccodes=https://confluence.ecmwf.int/download/attachments/45757960/
site_grads=ftp://cola.gmu.edu/grads/2.2/ #Note: this is the release version, not the package version

# Which server are we installing on?
#source config.ollie@awi.de
#source config.juwels@fz-juelich.de
source config.juwels-2020ps@fz-juelich.de
#source config.juwels-2020op@fz-juelich.de
#source config.mistral@dkrz.de
#source config.aleph@iccp.kr


# End of user configuration
#=================================================================#
#=================================================================#
# Install ZLIB

if [ "$switch_zlib" = true ] ; then
	url=${site_zlib}/zlib-${version_zlib}.tar.gz

	mkdir -p ${build_dir}
	pushd ${build_dir}

	wget -nc ${url}
	tar xzf zlib-${version_zlib}.tar.gz

	pushd zlib-${version_zlib}

	CC=${CC} CFLAGS=-w ./configure \
	--prefix=${prefix} 2>&1 | tee zlib_configure.log

	make all 2>&1 | tee zlib_compile.log
	make install 2>&1 | tee zlib_install.log

	popd
	popd
fi
export ZLIB_ROOT=$prefix

#=================================================================#
#=================================================================#
# Install SZIP

if [ "$switch_szip" = true ] ; then
	url=${site_szip}/${version_szip}/src/szip-${version_szip}.tar.gz

	mkdir -p ${build_dir}
	pushd ${build_dir}

	wget -nc ${url}
	tar xzf szip-${version_szip}.tar.gz

	pushd szip-${version_szip}

	CC=${CC} CFLAGS=-w ./configure \
	--prefix=${prefix} 2>&1 | tee szip_configure.log

	make all 2>&1 | tee szip_compile.log
	make install 2>&1 | tee szip_install.log

	popd
	popd
fi
export SZIP_ROOT=$prefix

#=================================================================#
#=================================================================#
# Install HDF5 1.10.5 with parallel I/O 

if [ "$switch_hdf5" = true ] ; then
	url=${site_hdf5}/hdf5-${version_hdf5}/src/hdf5-${version_hdf5}.tar.gz

	mkdir -p ${build_dir}
	pushd ${build_dir}

	wget -nc ${url}
	tar xzf hdf5-${version_hdf5}.tar.gz

	pushd hdf5-${version_hdf5}

	CC=${CC} CFLAGS=-w ./configure \
	  --disable-static \
	  --enable-parallel \
	  --enable-fortran \
	  --prefix=${prefix} 2>&1 | tee hdf5_configure.log

	make all 2>&1 | tee hdf5_compile.log
	make install 2>&1 | tee hdf5_install.log

	popd
	popd
fi
export HDF5_ROOT=$prefix

#=================================================================#
#=================================================================#
# Install parallel NetCDF using parallel HDF5

if [ "$switch_netcdfc" = true ] ; then
	url=${site_netcdfc}/netcdf-c-${version_netcdfc}.tar.gz

	mkdir -p ${build_dir}
	pushd ${build_dir}

	wget -nc ${url}
	tar zxf netcdf-c-${version_netcdfc}.tar.gz

	pushd netcdf-c-${version_netcdfc}

	CC=${CC} CPPFLAGS=-I${prefix}/include LDFLAGS=-L${prefix}/lib ./configure \
		--enable-netcdf4 \
		--disable-dap \
		--prefix=${prefix} 2>&1 | tee netcdf_configure.log

	make all 2>&1 | tee netcdf_compile.log
	make install 2>&1 | tee netcdf_install.log

	popd
	popd
fi
export NetCDF_C_ROOT=$prefix
export LD_LIBRARY_PATH=${NetCDF_C_ROOT}/lib:${LD_LIBRARY_PATH}


#=================================================================#
#=================================================================#
# Install NetCDF Fortran

if [ "$switch_netcdff" = true ] ; then
	url=${site_netcdff}/netcdf-fortran-${version_netcdff}.tar.gz

	mkdir -p ${build_dir}
	pushd ${build_dir}

	wget -nc ${url}
	tar zxf netcdf-fortran-${version_netcdff}.tar.gz

	pushd netcdf-fortran-${version_netcdff}
	FC=${FC} CC=${CC} CPPFLAGS=-I${prefix}/include LDFLAGS=-L${prefix}/lib ./configure \
		--prefix=${prefix} 2>&1 | tee netcdff_configure.log

	make all 2>&1 | tee netcdff_compile.log
	make install 2>&1 | tee netcdff_install.log

	popd
	popd
fi
export NetCDF_FORTRAN_ROOT=$prefix


#=================================================================#
#=================================================================#
#Installing eccodes

if [ "$switch_eccodes" = true ] ; then
	url=${site_eccodes}/eccodes-${version_eccodes}-Source.tar.gz

	mkdir -p ${build_dir}
	cd ${build_dir}

	wget -nc ${url}
	tar zxf eccodes-${version_eccodes}-Source.tar.gz

	cmake eccodes-${version_eccodes}-Source       \
	      -DCMAKE_C_COMPILER=${CC}       \
	      -DCMAKE_Fortran_COMPILER=${FC} \
	      -DCMAKE_INSTALL_PREFIX:PATH=${prefix}   \
	      -DENABLE_NETCDF=ON              \
	      -DENABLE_ECCODES_OMP_THREADS=ON \
	      -DENABLE_JPG=OFF                \
	      -DENABLE_PNG=OFF                \
	      -DENABLE_PYTHON=ON              \
	      -DENABLE_FORTRAN=ON             \
          -DECBUILD_DISABLE_RPATH_FIX=ON  \
	      -DBUILD_SHARED_LIBS=BOTH

	make -j 4 | tee eccodes_make.out

	make check | tee eccodes_check.out

	make install | tee eccodes_install.out
	ln -s $prefix/lib64* $prefix/lib/
fi


#=================================================================#
#=================================================================#
# Install Grads

if [ "$switch_grads" = true ] ; then
	url=${site_grads}/grads-${version_grads}-src.tar.gz

	mkdir -p ${build_dir}
	pushd ${build_dir}

	wget -nc ${url}
	tar zxf grads-${version_grads}-src.tar.gz

	pushd grads-${version_grads}
	FC=${FC} CC=${CC} CPPFLAGS=-I${prefix}/include LDFLAGS=-L${prefix}/lib ./configure \
		--prefix=${prefix} 2>&1 | tee grads_configure.log

	make all 2>&1 | tee grads_compile.log
	make install 2>&1 | tee grads_install.log

	popd
	popd

fi
export GRADS_ROOT=$prefix



#=================================================================#
#=================================================================#

printf "============================="
printf "Library installation finished"
printf "============================="
